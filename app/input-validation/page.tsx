"use client";
import { useState } from "react";
import DOMPurify from "dompurify";

export const UnsafeRender = ({ userInput }) => {
  /* 
     - In this case, DOMPurify ensures that the content rendered through 
    dangerouslySetInnerHTML is sanitized and safe from XSS attacks. 
     - Avoid using dangerouslySetInnerHTML unless necessary, 
    and always sanitize its content.
   */
  const cleanHTML = DOMPurify.sanitize(userInput);

  return <div dangerouslySetInnerHTML={{ __html: cleanHTML }} />;
};

function SignupForm() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [sanitizedEmailInput, setSanitizedEmailInput] = useState("");
  const [sanitizedPasswordInput, setSanitizedPasswordInput] = useState("");
  const [error, setError] = useState({ email: "", password: "" });

  const validateEmail = (email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const validatePassword = (password) => {
    return password.length >= 8; // Example rule: password must be at least 8 characters long
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    let emailError = "";
    let passwordError = "";

    if (!validateEmail(email)) {
      emailError = "Invalid email address.";
    }

    if (!validatePassword(password)) {
      passwordError = "Password must be at least 8 characters long.";
    }

    if (emailError || passwordError) {
      setError({ email: emailError, password: passwordError });
    } else {
      // Submit form
      console.log("Form submitted:", { email, password });
      console.log("Form submitted with sanitized", {
        sanitizedEmailInput,
        sanitizedPasswordInput,
      });
    }
  };

  return (
    <div>
      <form onSubmit={handleSubmit}>
        <div>
          <label>Email:</label>
          <input
            type="email"
            value={email}
            onChange={(e) => {
              const email = e.target.value;
              const clearnEmail = DOMPurify.sanitize(email);
              setEmail(email);
              setSanitizedEmailInput(clearnEmail);
            }}
          />
          {error.email && <p>{error.email}</p>}
        </div>
        <div>
          <label>Password:</label>
          <input
            type="password"
            value={password}
            onChange={(e) => {
              const password = e.target.value;
              const clearnPassword = DOMPurify.sanitize(password);
              setPassword(password);
              setSanitizedPasswordInput(clearnPassword);
            }}
          />
          {error.password && <p>{error.password}</p>}
        </div>
        <button type="submit">Sign Up</button>
      </form>

      <h1>CSRF Token</h1>
      <p>
        The most widely-used defense mechanism is to use CSRF tokens. A unique
        token is generated by the server and passed to the frontend, typically
        as part of a form or API request. The backend then verifies that the
        token matches the one associated with the userâ€™s session.
      </p>
      <ul style={{fontFamily: "sans-serif", fontSize: "18px", lineHeight: '22px'}}>
        <ol>
          <strong>Server Generates Token: </strong>When the user authenticates
          (e.g., logs in), the server generates a unique CSRF token and sends it
          to the client.
        </ol>
        <ol>
          <strong>Client Stores Token: </strong> The React frontend stores the
          token (usually in a cookie or in local storage).
        </ol>
        <ol>
          <strong>Client Sends Token: </strong>
          For each sensitive request (like form submissions or API calls that
          modify data), the frontend sends the CSRF token to the backend.
        </ol>
        <ol>
          <strong>Server Verifies Token: </strong>
          The server checks that the token matches the expected value before
          allowing the request to proceed.
        </ol>
      </ul>
    </div>
  );
}

export default SignupForm;

// export function SanitizedInput() {
//   const [input, setInput] = useState("");
//   const [sanitizedInput, setSanitizedInput] = useState("");

//   const handleChange = (e) => {
//     const dirtyInput = e.target.value;
//     const cleanInput = DOMPurify.sanitize(dirtyInput);
//     setInput(dirtyInput);
//     setSanitizedInput(cleanInput);
//   };

//   const handleSubmit = (e) => {
//     e.preventDefault();
//     console.log("Sanitized Input:", sanitizedInput);
//   };

//   return (
//     <form onSubmit={handleSubmit}>
//       <div>
//         <label>Input:</label>
//         <input type="text" value={input} onChange={handleChange} />
//       </div>
//       <button type="submit">Submit</button>
//       <p>Sanitized Output: {sanitizedInput}</p>
//     </form>
//   );
// }
